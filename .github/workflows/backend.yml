name: Pipeline backend

on:
  push:
    branches: main
      
env:
      IMAGE_NAME: bouthainabakouch/backend-api
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
jobs:
  test:
    runs-on: ubuntu-latest  
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: install dependencies
        run: npm i

      - name: Unit Test
        run: |
          rm -rf test-report
          mkdir test-report
          npm run test -- --json --outputFile=test-report/test-report.json
        continue-on-error: true

      - name: upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Jest-Report
          path: test-report/test-report.json

      - name: Check test results and fail if tests failed
        id: check-tests
        run: |
            # Simple check using Node.js to see if the tests failed
            node -e "
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('test-report/test-report.json'));
            if (report.success === false || report.numFailedTests > 0) {
              console.error('::error::Tests failed. Stopping workflow.');
              process.exit(1);
            }
            "
            
      - uses: act10ns/slack@v2
        with:
              status: ${{ job.status }}
              steps: ${{ toJson(steps) }}    
        if: always()

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: build docker image
        run: docker build -t ${{ env.IMAGE_NAME}} .
        
      - name: login to dockerhub
        uses: docker/login-action@v3
        with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: push image docker
        run: docker push ${{ env.IMAGE_NAME}}:latest
        
      - name: tag image With version number
        run: docker tag ${{ env.IMAGE_NAME}} ${{ env.IMAGE_NAME}}:${{ github.run_number }}

      - name: push image with version number
        run: docker push ${{ env.IMAGE_NAME}}:${{ github.run_number }}


  deployement:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
          - name: connect via ssh and execute commands
            uses: appleboy/ssh-action@v1
            with:
                  host: ${{ secrets.HOST }}
                  username: user
                  password: ${{ secrets.PASSWORD }}
                  script: |
                      cd /home/user/devops-proj/back
                      sudo git pull
                      sudo docker compose pull
                      sudo docker compose up -d --force-recreate --remove-orphans
                      




